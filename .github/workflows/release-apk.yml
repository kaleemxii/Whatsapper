name: Build and Release APK

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release name'
        required: true
        default: 'Release v1.0.0'
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode keystore
      run: |
        echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > app/release-key.jks

    - name: Build release APK
      run: ./gradlew assembleRelease

    - name: Sign APK
      run: |
        # Sign the APK using jarsigner
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore app/release-key.jks \
          -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.RELEASE_KEY_PASSWORD }}" \
          app/build/outputs/apk/release/app-release-unsigned.apk \
          "${{ secrets.RELEASE_KEY_ALIAS }}"

    - name: Get APK path and name
      id: apk_info
      run: |
        # Debug: List all APK files in the release directory
        echo "=== APK files in release directory ==="
        ls -la app/build/outputs/apk/release/
        echo "================================"
        
        # After jarsigner, the APK remains as app-release-unsigned.apk
        # We can optionally rename it to app-release.apk for clarity
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          # Rename the signed APK for clarity
          mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release.apk
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          echo "Renamed signed APK to app-release.apk"
        else
          echo "Error: Signed APK not found at expected location"
          echo "Available files:"
          find app/build/outputs -name "*.apk" -ls
          exit 1
        fi
        
        APK_NAME=$(basename "$APK_PATH")
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
        # Verify APK exists and is properly signed
        if [ ! -f "$APK_PATH" ]; then
          echo "Error: APK not found at $APK_PATH"
          exit 1
        fi
        
        # Verify the APK is signed
        jarsigner -verify "$APK_PATH"
        if [ $? -eq 0 ]; then
          echo "✅ APK is properly signed"
        else
          echo "⚠️ APK signature verification failed"
        fi
        
        echo "Found APK: $APK_PATH ($(du -h "$APK_PATH" | cut -f1))"

    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-release-apk
        path: ${{ steps.apk_info.outputs.apk_path }}
        retention-days: 30

    - name: Determine tag and release name
      id: release_info
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        name: ${{ steps.release_info.outputs.release_name }}
        body: |
          ## What's Changed
          
          - Released signed APK for Android devices
          - Requires Android 7.0 (API level 24) or higher
          - Grant required permissions for call logs and contacts when prompted
          
          ## Installation
          
          1. Download the APK below
          2. Install on your Android device
          3. Grant the required permissions when prompted
          
          **Note**: You may need to enable "Install from unknown sources" in your device settings.
        files: ${{ steps.apk_info.outputs.apk_path }}
        draft: false
        prerelease: false

    - name: Clean up keystore
      if: always()
      run: |
        rm -f app/release-key.jks